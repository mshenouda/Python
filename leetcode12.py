
from heapq import heapify, heappush
from math import ceil

from numpy import Inf


def singleNonDuplicate(nums):
    n = len(nums)
    if n == 1:
        return nums[0]
    l, r = 0, n-1
    while l <= r:
        mid = l + (r-l)//2
        if mid == n -1 or mid == 0 or nums[mid-1] != nums[mid] != nums[mid+1]:
            return nums[mid]
        
        if mid % 2 != 0:       
            if nums[mid-1] == nums[mid]:
                l = mid+1
            elif nums[mid+1] == nums[mid]:
                r = mid-1
        else:
            if nums[mid-1] == nums[mid]:
                r = mid-1
            elif nums[mid+1] == nums[mid]:
                l = mid+1
    return -1    

#nums = [1,1,2,3,3,4,4,8,8]
# nums = [1,1,2,3,3,4,4,8,8]
# nums = [3,3,7,7,10,11,11]
# nums = [1,1,2]
# result = singleNonDuplicate(nums)
# print("Result is {0}".format(result))

def searchRange(nums, target: int):
    n = len(nums)
    if n == 1:
        if nums[0] == target:
            return [0, 0]
        return [-1, -1]
    
    l, r = 0, n-1
    
    
    while (l <= r):
        mid = l + (r-l)//2
        if target == nums[mid]:
            low, high = mid, mid
            while nums[low] == target:
                low -= 1
                if low < 0:
                    break
            while nums[high] == target:
                high += 1
                if high >= n:
                    break
            return [low+1, high-1]
        elif target < nums[mid]:
            r = mid - 1
        else:
            l = mid + 1
            
    return[-1, -1]
    
# nums = [5,7,7,8,8,10]
# target = 8
# nums = [5,7,7,8,8,10]
# target = 6
# nums = [1]
# target = 0
# nums = [2,2]
# target = 2
# result = searchRange(nums, target)
# print("Result is {0}".format(result))

def search(nums, target: int):
    pass

# nums = [2,5,6,0,0,1,2]
# target = 0
# nums = [2,5,6,0,0,1,2]
# target = 3
# nums = [1,0,1,1,1]
# target = 0

# nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1]
# target = 2
# result =  search(nums, target)
# print("Result is {0}".format(result))


def searchMatrix(matrix, target: int):

    rows, cols = len(matrix), len(matrix[0])
    if target < matrix[0][0]:
        return False
    if target > matrix[rows-1][cols-1]:
        return False    
    
    i = 0
    while i < rows and target >= matrix[i][0]:
       i+=1
    
    print(i)
    
    l, r = 0, cols-1
    while l <= r:
        mid = l + (r -l)// 2
        if matrix[i-1][mid] == target: return True
        if target > matrix[i-1][mid]: 
            l = mid + 1
        else:
            r = mid - 1
    return False

# matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]]
# target = 3
# result =  searchMatrix(matrix, target)
# print("Result is {0}".format(result))

# def searchMatrix2(matrix, target: int):
#     n, m = len(matrix), len(matrix[0])
#     l, r = 0, m-1 
#     while l <= r :
#         if matrix[]
    
    
# matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]
# target = 5
# result =  searchMatrix2(matrix, target)
# print("Result is {0}".format(result))

def findRightInterval(intervals):
    
    d1 = {}
    for i, val in enumerate(intervals):
        d1[str(val)] = i 

    d2 = {}
    sorted_intervals = sorted(intervals, key=lambda x: x[0])
    for i in range(len(sorted_intervals)-1):
        if sorted_intervals[i+1][0] < sorted_intervals[i][1]:
            d2[str(sorted_intervals[i])] = -1
        else:
            d2[str(sorted_intervals[i])] = d1[str(sorted_intervals[i+1])] 
    
    d2[str(sorted_intervals[-1])] = -1
    print(d1, d2)
    result = [0] * len(intervals)
    for i, val in enumerate(intervals):
        result[i] = d2[str(val)]
    return result

# intervals = [[3,4],[2,3],[1,2]]
# intervals = [[1,4],[2,3],[3,4]]
# intervals = [[1,12],[2,9],[3,10],[13,14],[15,16],[16,17]]
# result =  findRightInterval(intervals)
# print("Result is {0}".format(result))


def maxDistance(nums1, nums2):
    
    # d = {}
    # for i, num2 in enumerate(nums2):
    #     d[num2] = i
    
    n = len(nums2)
    def bsearch(left, target):
        l, r = 0, n-1
        minVal = 10**6
        maxVal = 0
        mid = l + (r-l) // 2
        while l <= r:
            if target >= nums2[mid]:
                return mid
            elif target > nums2[mid]:
                l = mid + 1
         
    
    maxDistance = 0    
    for i, num1 in enumerate(nums1):
        j = bsearch(i, num1)
        maxDistance = max(maxDistance, j-i)
    return maxDistance     
            
# nums1 = [55,30,5,4,2]
# nums2 = [100,20,10,10,5]
# result = maxDistance(nums1, nums2)
# print("Result is {0}".format(result))

def smallestDivisor(nums, threshold: int) -> int:

    global minVal
    minVal = 10**6
    
    def computeSum(divisor):
        sum = 0
        for num in nums:
            sum += ceil(num/divisor)
        return sum
    
    def bsearch():
        l, r = 1, max(nums)
        global minVal
        while l <= r:
            mid = l + (r-l)//2
            tmp = computeSum(mid)             
            if tmp > threshold:
                l = mid + 1
            else:
                minVal = mid 
                r = mid - 1
                
    bsearch()
    print(minVal)
    return minVal

# nums = [44,22,33,11,1]
# threshold = 5
# nums = [1,2,5,9]
# threshold = 6
# result = smallestDivisor(nums, threshold)
# print("Result is {0}".format(result))

# def findRadius(houses, heaters) -> int: 
#     pass       

# houses = [1,2,3,4]
# heaters = [1,4]
# result = findRadius(houses, heaters)
# print("Result is {0}".format(result))

def findMin(nums):
    if len(nums) == 1: return nums[0]
    if nums[0] < nums[-1]: return nums[0]
    
    n = len(nums)
    l, r = 0, n-1
    while l <= r:    
        mid = l + (r-l)//2
        if mid+1 < n and nums[mid] > nums[mid+1]:
            return nums[mid+1]
        if mid-1 < -1 and nums[mid-1] > nums[mid]:
            return nums[mid]
        if nums[mid] > nums[0]:
            l = mid
        else:
            r = mid
    return -1 
        
#nums = [4,5,6,7,0,1,2]
# nums = [11,13,15,17]
#nums = [4,5,1,2,3]
# nums = [3,1,2]
# result = findMin(nums)
# print("Result is {0}".format(result))


def searchMatrix(matrix, target: int) -> bool:
    cols = len(matrix[0])
    def bsearch(i):
        l, r = 0, cols-1
        while l <= r:
            mid = l + (r-l) // 2
            if matrix[i][mid] == target: return True
            if target > matrix[i][mid]:
                l = mid + 1
            else:
                r = mid - 1
        return False
    
    for i in range(len(matrix)):
        if bsearch(i):
           return True
    return False 

# matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]
# target = 5
# result = searchMatrix(matrix, target)
# print("Result is {0}".format(result))

class TopVotedCandidate(object):
    def __init__(self, persons, times):
        self.A = []
        self.count = {0:0, 1:0}
        
        for p, t in zip(persons, times):
            self.count[p] = c = self.count[p] + 1
            while len(self.A) <= c: 
                self.A.append([])
            self.A[c].append((t, p))

        print(self.count)
        print(self.A)

        
    def q(self, t):
        lo, hi = 1, len(self.A)
        while lo < hi:
            mi = (lo + hi) / 2
            if self.A[mi][0][0] <= t:
                lo = mi + 1
            else:
                hi = mi
        i = lo - 1
        # j = bisect.bisect(self.A[i], (t, float('inf')))
        #return self.A[i][j-1][1]
    

# topVotedCandidate = TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);

def maxProfitAssignment(difficulty, profit, worker) -> int:
    
    n = len(difficulty)
    maxProfit = [0] * n
    maxVal = -Inf
    for i in range(n):
        maxVal = max(maxVal, profit[i])
        maxProfit[i] = maxVal
    
    
    difficulty = sorted(difficulty)
    def bsearch(target):
        l, r = 0 , n-1
        while l <= r:
            mid = l + (r-l)// 2
            if difficulty[mid] == target:
                r = mid
                break
            
            if target > difficulty[mid]:
                l = mid + 1
            else:
                r = mid - 1
        
        print(l, r)   
        if r < 0: return -1
        return maxProfit[r]
                
    result = 0
    for i, target in enumerate(worker):
        val =  bsearch(target)
        if val > -1:
            result += val
    return result
    
# difficulty = [2,4,6,8,10]
# profit = [10,20,30,40,50]
# worker = [4,5,6,7]

# difficulty = [85,47,57]
# profit = [24,66,99]
# worker = [40,25,25]

# difficulty = [13,37,58]
# profit = [4,90,96]
# worker = [34,73,45]

# difficulty = [68,35,52,47,86]
# profit = [67,17,1,81,3]
# worker = [92,10,85,84,82]

# difficulty = [5,50,92,21,24,70,17,63,30,53]
# profit = [68,100,3,99,56,43,26,93,55,25]
# worker = [96,3,55,30,11,58,68,36,26,1]
# result = maxProfitAssignment(difficulty, profit, worker)
# print("Result is {0}".format(result))

def numRescueBoats(people, limit: int) -> int:
    people = sorted(people)
    i = 0
    counter = 0
    n = len(people)
    while i < n:
        sum = people[i]
        while (i+1 < n) and sum + people[i+1] <= limit:
            i+=1
            sum += people[i]
        counter += 1
        i+=1
    return counter
 
# people = [3,5,3,4]
# limit = 5 
# people = [1,2]
# limit = 3
# people = [3,2,2,1]
# limit = 3
# people = [3,5,3,4]
# limit = 5
people = [5,1,4,2]
# limit = 6
# result = numRescueBoats(people, limit)
# print("Result is {0}".format(result))

def findNthDigit(n: int) -> int:
    from math import ceil
    if not n:
        return 0

    t = 1
    while True:
        upper = int("9"*t) 
        lower = int("1" + "0"*(t-1))
        tier_total = (upper-lower+1)*t
        if tier_total>=n:
            break
        else:
            t+=1
            n-=tier_total

    #         At this point we have the tier the element belongs in. 
    #         How do I find the number?

    #       111 1_2 111 n= 5//3 = 1
    #       111 _22 000 n=4 4//3 = 
    #       111 12_ 000 n=6

    element_index = ceil(n/t) - 1
    number = str(element_index+lower)
    return number[(n%t)-1]

# n = 180
# result = findNthDigit(n)
# print("Result is {0}".format(result))

def maximumCandies(candies, k: int) -> int:
    total = sum(candies)
    if total < k: return 0
    
    def validDivisor(mid):
        result = 0
        for candy in candies:
            result += candy // mid
            if result >= k: return True
        return False
        
    
    def bsearch():
        l,r= 1, total
        result = 0
        while l <= r:
            mid = l + (r-l)//2
            if not validDivisor(mid):
                r = mid - 1    
            else:
                result = mid
                l = mid + 1
        return result
    
    result = bsearch()
   
    return result
    
# candies = [2,5]
# k = 11
# candies = [5,8,6]
# k = 3
# candies = [4,7,5]
# k = 4
# candies = [5,6,4,10,10,1,1,2,2,2]
# k = 9
# candies = [4,7,5]
# k = 4
# candies = [312413,746822,811173,311276,191516,136651,873287,267210,215887,628774,466174,855342,793183,658703,783942,183169,357998,111210,595945,524886,198085,790932,318997,120574,852612,486079,402689,753623,598675,482968,897932,685896,190538,682631,889696,272117,520511,274034,398897,318985,485516,326587,693896,428887,869477,609794,736816,744417,624771,764708,231434,146932,880585,642025,486647,387531,110955,698730,415185,546999,575489,768496,769156,365434,323568,815799,466343,785452,835831,745887,893286,163167,179700,798143,204613,763838,777351,654714,645010,761877,733196,857350,185279,538409,502250,337966,449067,433307,392060,731005,395350,670550,565590,452929,628818,702533,227447,469517,676900,848771,513077,272804,686753,539402,435053,323238,805524,720409,585103,743969,425637,642416,698704,136284,414377,652459,207579,226631,775463,878710,370639,838481,662076,348329,881408,338070,325765,837931,786632,483149,896315,716717,700041,479085,375732,522555,114468,102494,532002,105451,302157,126074,243474,472499,187312,127287,782820,565601,641108,890749,633615,829601,715897,354721,728580,776412,286026,420772,772278,300989,597299,811733,840653,315999,434482,897386,285010,106646,781970,409454,265517,565548,155307,887084,427559,332847,311001,813436,555770,688310,222720,880242,850951,464503,462803,582108,474922,490193,225139,787635,835731,134059,367883,350464,455297,354024,289709,848303,121964,467506,107369,167152,186364,428062,202885,331049,412438,464138,257900,414012,445723,485168,753038,199899,855871,242961,518584,508939,263801,652086,850096,828235,836253,882473,731561,764837,353492,394070,453915,818967,226440,489958,630192,636667,618410,171045,134897,343245,131015,640316,196931,715842,681413,171087,885994,310792,164784,393332,189175,313291,424242,257893,592227,232088,802174,492386,775119,556919,776375,199175,790722,557197,476967,690896,326754,266092,425100,326901,192011,452857,101759,669568,571665,798835,642163,747891,344103,319141,510277,734754,233620,526577,791486,793807,808028,134599,184333,113087,564625,574552,415629,626099,133304,640646,334583,648286,173780,118615,849588,134631,220543,210819,269060,553612,586900,100049,301024,519180,703176,182382,352459,443060,614853,826553,317857,497922,506558,616331,732911,246844,836737,823653,833565,453135,546939,748721,426219,505418,635763,408534,151111,861266,287641,738036,498415,644481,785183,357750,161460,419684,534709,577020,359504,413509,411203,484099,681373,608604,425255,374610,895030,702987,862513,148324,529375,279065,629397,585250,708760,622221,352976,664769,423183,207655,836783,507815,309147,893236,328554,332800,280520,822515,151331,552734,655023,833632,392735,217338,148478,648249,321147,814603,422947,887744,800012,674039,748827,711349,631753,304954,181049,891693,303333,724435,862822,691556,214728,244122,721167,608447,832161,133241,430225,304779,808007,806398,647688,870501,514867,452315,488184,482058,796767,644967,665902,614011,819859,328953,829221,168315,365053,199707,693725,125772,549659,448556,705770,137975,387144,473792,598699,121740,298575,373999,574586,234779,748698,363621,799777,104854,215247,209816,116281,485697,349236,637164,523187,864658,654954,457021,565011,248074,123248,132552,442901,354184,611305,496347,111483,687821,259833,830106,236003,170572,485492,286980,829984,546196,262662,835567,325124,565566,513354,477933,795975,610863,247363,121709,688523,873476,650069,165715,697361,894833,174764,360213,547500,467577,368690,626826,346149,839634,342331,390540,551492,889091,605169,615236,295946,156281,836882,669659,328949,840280,766705,304556,151604,317047,303151,121789,123755,762302,883341,520457,325545,553889,629819,648389,338479,463439,249561,201369,130398,829938,609092,874768,773954,766178,865181,540585,122417,362587,519384,897898,888611,480184,424397,556614,299116,830997,450252,817083,899196,734330,644790,333520,280577,559153,502091,289555,671457,210783,403869,841961,512603,817274,202518,452047,636719,627799,584350,840853,698776,178861,844587,655270,259707,370499,397002,579851,640674,631228,495942,408842,352481,549959,215136,826348,515385,644198,363851,706755,252993,270205,668320,394600,469966,209450,185823,701165,396651,349865,756506,125895,431775,635157,349493,154093,676103,791720,442033,726821,839359,734078,134630,242294,294416,404625,452317,443702,696201,176034,646228,674153,603356,850420,353860,804856,456079,855304,147564,233484,230587,381647,546474,419726,291182,675381,758479,162802,478510,615640,560669,540393,318934,879257,831054,629691,899470,288227,579330,136288,809003,537182,827848,242414,615375,392358,268422,283071,553467,537679,160067,440736,297351,133260,414719,830720,592749,767197,598951,837363,840246,151842,742226,118080,709347,398893,672122,716012,251547,849085,728129,826878,570291,449469,531219,727447,125282,330714,655361,301919,153577,200089,610602,365053,207192,726285,843756,744989,380935,858999,765032,704466,852324,454297,814269,483077,178568,875939,508467,403205,534513,738285,391111,407642,153666,622514,432184,725870,578327,627406,797015,590256,220211,613014,386767,664988,244593,135247,609177,293447,488237,794912,539049,419419,524132,831051,187757,614801,540317,684309,433290,126441,587128,373078,293532,562193,723592,724626,829903,516369,663559,507351,616061,677393,540968,222174,174697,667473,578785,173829,191639,572264,700934,432677,539819,245158,490299,644195,796934,417746,707127,806151,277803,628376,680101,324069,756865,568477,802244,816715,355152,836097,451278,579515,393000,298619,500941,708236,657026,467170,467987,326950,611323,490571,637904,357003,529111,447949,157486,505294,855178,764861,541322,684963,869344,222036,721856,509070,468284,709899,371248,256880,607613,225806,405871,226119,751128,572990,591718,570753,606525,590728,181986,768879,168708,610810,807318,273852,509835,655998,434288,654757,322075,584024,856060,896825,603909,888748,500050,423602,873861,527773,138415,413640,230689,554152,665102,364637,564814,330545,447603,458414,348317,811042,184510,469937,527655,151602,591227,208486,146080,767118,322667,608230,727361,767999,384513,200838,171703,601566,876569,600806,723965,662885,219272,635621,732490,366560,539824,186894,877638,710847,400928,648185,361206,194043,542224,538220,115349,280681,410577,120932,643278,518952,556640,896303,620931,241070,597072,791778,319511,633323,795391,792206,737619,298674,109430,194425,522676,459239,123902,434995,888782,654377,142303,440039,111557,669296,888485,566033,866750,419815,483030,750178,572788,600281,724831,486361,140489,477571,284488,465253,809685,598665,495456,122468,450612,716338,445813,496267,309890,378679,889469,605514,419061,110953,426192,626981,212071,380876,382988,111731,766707,737605,180716,609035,747249,866580,185637,781988,832783,371696,277333,694448,452741,392639,759564,413579,671619,359081,797956,459464,205758,813051,877340,530266,878091,414154,607515,884405,596560,456243,826955,272831,726233,418830,276661,891881,308158,797941,872417,363580,399190,647242,546686,756508,718002,111850,890398,346145,480449,107115,269103,856355,790563,658002,746039,641992,731288,319141,180072,330730,184517,256713,261674,568033,842229,376624,881650,311412,658835,164455,567076,617450,863703,778525,443205,587671,456504,320563,495585,837065,469058,105721,817459,166106,480887,182384,718158,800143,662072,502700,707148,780369,664662,455612,599150,541786,801949,310493,244362,467403,594874,108315,507343,248685,274435,438183,612855,791542,138174,236004,361196,104656,826329,732407,752894,755034,198329,104647,475118,410416,688710,583157,726295,246722,407614,847200,663400,730173,364116,531539,244823,647162,333410,202813,348469,249908,412601,429197,148030,654671,826649,280540,636416,773478,191499,616763,747939,636643,181541,464759,496970,732540,380351,646560,796363,489516,161326,330912,612370,605179,532077,173040,700997,219207,182278,440240,328675,401645,683613,580770,793772,711964,801817,889460,596027,250255,682182,869918,828791,121672,177197,464595,187998,129724,370256,592285,777998,619012,527304,147875,459825,665610,456982,493184,422815,192242,591717,566931,177875,798007,407951,735774,557484,686831,533612,611273,467190,574877,168099,645045,173477,699791,351962,523001,286647,805256,219441,198664,802854,655176,249891,145454,424533,815707,665132,151520,608276,377086,642924,552074,886284,291828,781555,600366,475289,659036,809351,769202,803460,144967,801038,801110,766434,223712,548260,466422,467880,105593,428323,206375,167886,296310,743325,117574,552026,892067,399833,855337,649845,245999,847924,632325,307865,800099,463260,294846,516130,347386,136146,662650,240540,484372,365137,881389,649874,518288,629272,236757,183235,804239,645987,639368,731896,369722,202903,368011,323677,623327,871769,661923,115157,732253,404257,254248,449305,559580,632994,521133,147353,162909,853311,282305,431914,339653,252296,357842,628111,410196,851998,614260,194527,125026,817248,741401,474447,532065,288158,767892,358810,196609,189157,194830,388166,888295,798593,869478,110741,806883,719115,755947,365147,248626,316229,207785,449876,584017,863648,296903,318200,128599,328062,312966,381775,772111,147363,753745,616165,528219,724209,439215,244252,821449,458113,525512,345257,527589,212972,589928,836394,274574,660945,720561,342893,707712,516179,371461,660404,640861,625239,170800,277179,230156,764108,599440,271527,526586,339744,895595,478999,399631,523977,509680,811113,190633,521727,778520,648184,489261,712386,663904,440784,856222,195587,437939,194402,177477,340610,229917,343513,739441,199995,657658,302655,868873,432837,860495,154595,645464,270349,263025,622648,245614,406578,609090,370237,877579,143109,494419,110718,884445,228993,416892,205913,715908,842631,197512,897308,201410,888940,688539,394509,753788,722772,576882,462088,132724,803078,301908,627422,634005,840925,214378,629371,134673,622935,829071,213830,852170,747142,173404,557481,486645,595037,459221,234364,838055,776050,761612,338853,294106,160437,470047,162585,713965,454670,852211,168936,490957,409135,374863,727991,318723,706816,684920,127529,840916,860870,350964,733532,814823,578583,559122,250170,107385,202241,130587,422258,202893,274903,514502,801512,445752,650322,712306,646003,514267,859784,793651,694717,593260,752542,355083,896156,373954,227192,439158,647614,860378,701919,783531,352608,410487,560733,378503,688995,816080,106028,505529,834233,720120,286807,609686,554279,847320,763750,830727,147819,497662,891772,130635,206050,433513,282102,883757,132974,697918,804165,366161,548046,193361,808140,485618,532721,513433,866683,232032,381970,114019,610322,727524,875267,526521,718857,144910,792434,332009,282022,214574,573848,242789,463958,693476,521594,787705,594964,577752,430795,102938,339733,204682,388993,189312,159367,654252,457067,767007,703286,161666,384867,114438,412212,167117,356367,394693,492970,841448,226339,852136,696719,278809,702486,238064,487609,742207,187645,890305,242345,101976,369300,477024,455122,591402,311707,742332,497745,880887,468592,444020,856487,728071,103625,462034,474433,126663,387632,627399,148406,158693,206706,479407,474951,230865,506236,646925,603495,555815,474845,797950,886195,677785,472302,488290,157369,467202,515464,545002,241294,843029,355452,841096,262831,540226,337778,723704,538968,373885,173869,572611,719576,164437,369512,897228,108404,506088,772758,434366,782232,274874,140829,840028,827607,775162,231660,653453,354172,310767,754808,336887,471808,364625,844924,596977,442148,363415,144472,215088,115844,685556,825703,624644,315985,479945,828703,555617,375468,761025,375937,766078,296809,438775,893081,505493,101645,330190,567931,518062,274319,448925,489619,731621,111659,139249,894752,597085,724334,223810,344926,234782,532084,504836,414034,644433,387461,167415,510403,184423,391145,769112,455263,229187,397586,713000,185060,437575,895914,795952,172312,483233,645848,524448,547415,632224,892761,318196,851339,196869,767474,289328,236920,160907,818796,202378,456575,798376,836820,659529,590045,624109,571754,524558,895277,605060,546475,127276,364828,304204,259091,416749,562945,752386,301540,481973,415479,477478,694545,819993,617967,236146,553563,592569,306638,721212,782077,513798,276540,873876,494672,738829,716934,578460,631908,857808,479751,543634,821017,392983,846926,402568,853536,704882,248339,234484,139771,412921,790525,668459,896516,545210,323378,640160,611200,548020,276777,341567,529110,148920,454012,786602,358001,200459,791324,827749,278305,721389,102947,507231,695436,189695,293213,391126,534291,275316,574428,566138,195215,180498,502614,153484,463054,134700,244079,438130,184373,284349,553757,136231,513571,279918,278310,870527,241091,722085,218301,229566,448995,674761,816427,622966,509356,671569,587636,657894,610753,855907,183307,208846,690613,262714,486892,633350,563919,254395,657634,688798,272822,862665,623291,713239,692686,807418,280641,329752,509897,281197,857705,672041,877408,639939,711047,741938,128707,152674,862297,489085,601520,805216,523068,669239,139989,298991,508999,154118,433230,147182,196720,298723,283603,193989,318943,517932,672911,102695,300578,124788,186205,650351,784902,336417,754770,761947,474980,243431,810290,338846,847688,222461,530843,675991,527267,879718,141882,515921,321276,464264,833403,794813,476958,559654,671321,689768,737227,778872,867606,319753,734627,702465,491010,733609,109000,483076,521993,725293,326956,664298,304745,181260,446299,733784,448810,248300,458390,133284,117791,702581,194396,629706,456981,550876,494997,761600,673821,691622,593421,820409,425455,490331,290363,476282,125970,336910,270570,164886,742663,422675,652353,604021,629169,438966,604669,816757,373886,166704,204126,447327,488919,455004,123897,120920,899919,191637,173950,684095,805151,231462,251782,888032,557115,646137,452525,597689,871919,823555,869556,291547,505061,577783,832423,115083,556953,207897,497918,145344,475180,698827,118121,268814,137333,131418,536590,471702,570330,862471,887795,487441,711342,307258,220919,371735,106479,583428,150473,872269,588060,409305,380137,283121,237231,473314,308190,547872,665228,196776,291329,390004,360426,497164,316988,195689,852427,401133,802153,551690,354085,227730,282783,668203]
# k = 2201
# result = maximumCandies(candies, k)
# print("Result is {0}".format(result))

def minimumTime(time, totalTrips: int) -> int:
    def countTime(mid):
        result = 0
        for i in time:
            result += (mid//i)
        return result

    def bsearch():      
        l = 1
        r = max(time) * totalTrips
        result = -1
        while l <= r:
            mid = l + (r-l)//2
            val = countTime(mid)
            if val >= totalTrips:
                r = mid - 1
            else:
                l = mid + 1
        print(result)
        return l
    result = bsearch()     
    print(result) 
    return result

time = [1,2,3]
totalTrips = 5
# time = [2]
# totalTrips = 1
# time = [5,10,10]
# totalTrips = 9
# time = [35526,68271,53295,85312,98439,20401,12567,75537,13042,3015,17945,51706,8379,9020,68149,90591,69251,9417,78418,35804,36630,93100,14223,27099,65124,38701,93629,82300,78404,72046,35760,11057,60001,55960,96428,49527,87398,89804,45956,46031,48904,35592,66810,2777,75831,753,82438,19950,57812,24402,51134,20588,25909,80046,36073,71308,94062,89630,18090,93549,23207,66416,54285,76663,66441,79464,67201,93574,61759,54469,42206,15010,17893,61618,27951,90361,86666,82842,43701,21837,56027,53768,53220,56636,73170,13353,22393,44370,46178,39523,86692,60228,37866,38409,844,36175,62823,40866,71862,19182,73662,11399,26141,57640,19902,40962,25361,58833,51163,35488,5561,54750,84308,64353,64150,17552,69778,13564,6011,79167,56980,98308,83980,45116,56028,88225,1824,93699,89442,22404,5868,18700,44476,15869,1583,57636,28371,6270,66188,37726,76939,79238,59320,89811,66535,93128,21053,86603,90383,17679,95629,80276,62367,54714,81017,88434,81240,91915,14418,2251,50001,57081,56030,11941,83308,14990,37527,25793,96967,12902,36597,38487,10090,23757,18301,70951,76172,38409,12228,20382,16560,90106,43687,99248,33738,48726,65936,71531,66629,95433,59822,230,13699,21614,48847,3254,9417,28867,38889,64031,57498,83515,71619,95748,86437,40468,40175,1062,94502,96956,240,14265,77888,59298,27311,93953,99919,41606,52803,51401,64132,55876,85391,97101,56438,21074,79997,56815,92097,14090,85007,83914,19222,30752,41580,81193,82585,16509,86366,5654,48942,22998,73761,40595,73144,90131,29770,40487,58407,91217,86723,91291,76943,87736,16745,21252,71347,13605,51863,67662,951,42887,34961,71152,83517,14521,63450,49661,72650,31854,38506,14508,1837,99584,73991,19604,174,78776,34463,96369,16743,9341,27944,65679,70077,33227,52684,51832,91464,34239,50175,48925,9918,76944,22485,24469,74612,90584,21380,68789,65552,35330,58725,30035,88445,76097,90479,33509,21790,69282,33720,32661,92204,61463,69033,18774,40028,67322,63697,85469,42726,35207,13436,49118,27075,41241,12212,54741,31899,38764,19239,45927,79779,82559,69922,97988,64077,60899,19250,33197,12227,55129,6161,7679,90383,21720,38419,59921,40394,22248,84651,9919,14769,50547,35590,22054,98547,92300,50533,24494,6357,74340,16444,36562,25519,70299,91085,58473,48549,7314,49789,50854,94732,16473,22298,94573,1177,16647,10489,40756,11864,52532,78056,72466,45909,83358,36728,61145,24085,19232,2698,5866,21763,19417,52766,70604,75357,86363,23548,59612,57256,72080,90665,62130,17811,11737,40209,76143,84341,62105,9559,15885,44428,65942,73923,60174,94085,85226,22423,11680,16007,72223,92611,24143,56415,99004,35300,63534,91796,95364,39871,39547,31533,9820,19254,80757,67351,61252,27802,9134,3264,6660,43279,74234,27708,92078,17050,92833,33868,28116,35816,23129,63684,21393,445,6655,50495,45718,86882,71493,7397,16595,77758,80091,780,3783,16168,55390,30565,34707,32019,85772,90904,96641,85382,61320,23459,6965,97895,19435,36616,9787,54886,90036,92125,34729,38960,66245,58496,96129,46772,73733,65067,53184,66181,58382,3922,5387,65890,77429,38183,84541,27072,90736,94570,99936,73272,60375,10952,9332,97636,39694,13399,51220,5018,36268,85523,34753,53991,56651,17209,7006,45423,49624,9709,18987,4592,30361,88433,48024,29942,91592,8239,28732,35824,4946,65484,16979,33142,75656,3209,22468,85755,39194,87907,72594,43707,36876,81362,15459,68075,19741,18928,44027,63719,21262,75445,30250,51196,6219,34048,23502,60665,1631,62306,23264,67398,49274,84972,16739,94834,23334,82672,92166,31032,78520,93931,28044,61781,76557,33376,46480,26749,22509,64281,54589,50426,44636,45225,99895,71585,17673,13409,95493,90636,86268,16980,7514,39203,9907,27569,14822,61552,41838,74638,87542,72644,13042,1869,96037,96075,126,74862,40225,59462,42920,58159,34863,72917,85179,48285,19993,84466,7840,5972,54264,43475,92314,4800,19150,69554,56691,19948,27419,59213,66373,44592,46195,82009,78601,17154,27595,95329,36216,91618,71112,10493,57289,30769,54429,1855,13489,74406,57880,3088,92345,10824,87602,94317,95410,79507,89423,60715,37526,53564,98388,48032,35013,60838,99317,30389,69656,32224,70212,53067,31487,77619,32138,56939,25282,66232,54525,51762,86251,15422,96128,59093,39155,91664,95086,64328,58154,16901,57839,36992,59934,61257,5557,15425,57045,12889,69846,29139,61557,83756,32458,90919,52963,14359,49874,80682,84655,65452,55068,43914,76328,45679,35127,72774,62715,91798,29872,81354,80582,96103,28903,50678,9125,45643,11868,9791,46321,41872,7001,92742,89046,77778,58288,57737,28006,38887,4145,30995,23181,22663,76976,12037,94311,69665,47087,243,85775,33414,14113,25750,68464,27502,33912,49055,86698,68094,7608,70775,62943,42776,34704,11471,4417,99359,60717,71140,87687,24846,22480,56390,47598,28920,1425,78664,65311,25188,69310,46708,56404,79811,22070,75607,32708,1979,67357,81800,28625,58021,29588,49578,16281,18081,74281,57898,39302,18506,70543,41031,35986,1699,96223,41042,13283,50709,61933,91181,46030,61266,66703,82807,89387,67547,6497,55088,61583,42425,91409,85463,8301,78781,80870,98576,55880,33799,9806,31789,1220,49041,40852,98197,88459,80809,30683,45742,53320,25920,65231,56346,207,17794,82843,50215,57,47903,10075,62437,2278,98786,98119,45948,30820,29230,1929,76287,79090,85711,72527,92053,26601,48647,76929,14214,44902,76505,40038,64918,60383,35546,2544,40358,86056,60688,18499,88770,22849,63307,51149,60424,47592,43259,26180,16534,49804,23756,9616,13388,64930,99325,39424,70127,92799,91793,28812,71828,14453,91106,666,62810,11290,9647,22966,16230,35343,84054,34513,2255,89433,26782,46009,53791,44813,68657,49581,41018,86354,2203,96565,76773,2292,20466,91806,21150,4547,34076,35288,17350,37117,89318,5010,41980,98619,34277,56047,96091,14986,47946,557,12310,45083,33215,41672,76247,22120,98394,52505,32913,13669,79991,50390,84603,96700,45380,83969,62960,922,77322,89247,22082,77155,58180,85090,34045,78015,83134,65175,12575,29973,33374,66596,9773,3090,5978,51347,10092,21711,12959,59636,66040,79673,11149,3982,70175,26604,19115,27400,34364,82326,23104,1413,72067,46839,39644,24885,60701,72571,46163,83030,62798,48657,10336,45398,31463,35149,93705,89614,55496,94724,47644,67168,252,67317,90167,73396,79355,42813,69604,60195,31448,38177,8685,3453,27967,34365,20916,31161,32697,13569,56538,97312,43741,20268,62417,8800,58889,887,59083,37770,54497,3483,13208,78264,63926,51702,57788,62339,34878,25061,9272,33436,11559,24844,55273,15700,86056,24847,59543,88362,88930,99160,76001,3727,24347,62899,15058,36773,22921,46114,25650,24349,54426,88951,56929,34112,35932,96915,20056,5065,11710,85022,4786,58819,86765,42917,16629,75041,9382,15583,19171,72488,45448,12527,50008,93346,80955,45643,28915,73390,67806,29676,21950,45132,98400,54683,46952,36276,47913,48498,1003,77209,65162,29328,77900,23452,46557,11635,60276,59815,55051,47365,40098,9110,42438,89515,29366,57827,77546,87805,52271,13786,13027,80350,11753,39876,30041,90876,79402,47918,8267,44250,20405,2429,47678,66426,74651,60939,19540,75226,69460,30180,2743,70832,70474,56895,35632,7563,40387,84892,72994,86326,76410,12579,85154,21588,97138,35456,10816,66345,77797,68559,33827,77916,36264,33517,73029,83578,19096,40231,15099,56610,75386,1213,72113,89289,50868,23025,47995,10864,37206,21100,77996,15471,34319,91648,20577,67231,99970,74615,67606,25690,35923,8601,25104,31088,79805,51973,51920,84434,80312,25120,69047,95483,50715,29121,89649,46749,15222,93612,88422,86352,65066,62750,34466,64722,74346,74135,11801,17645,3812,92193,47185,34855,70969,43411,70828,3418,30992,16477,82597,55609,44222,41623,7218,28642,22624,12312,10349,65818,2864,88496,75385,1598,56445,37344,25697,2769,68254,46395,69019,20250,35393,16111,71962,44468,34732,99529,92395,1285,41002,50225,97701,69150,6999,14127,2882,34898,19302,44052,8041,47837,65291,432,46098,8936,28920,67179,54431,81597,56203,18857,65644,66000,87428,47819,22412,99383,69228,86157,14117,95023,86969,74639,58154,4275,52890,5310,70266,52189,37070,90901,25435,60438,67789,21700,82598,95286,97387,79924,44033,5780,47403,72271,65250,39131,22041,98251,60309,57013,1582,84467,1141,21623,85870,21842,59956,31760,89107,68510,15402,49597,57244,51077,73507,92790,33644,79234,31355,91673,35535,86931,62187,13454,66936,57556,90153,7256,19272,36508,16036,44137,87064,47269,91970,20794,3900,55674,49311,39261,84557,75459,97774,16230,91469,37598,17275,62318,1287,88218,69983,56343,52444,6720,58269,36530,79221,14821,35676,19580,97810,13112,60622,94837,44378,3430,61281,81910,42891,51976,76436,57016,11020,4864,8852,31660,17645,46208,82855,56127,72673,46038,12074,80563,36165,52039,74661,97768,52559,49274,82208,28035,37180,23005,19487,57510,5296,92608,41737,83942,8223,24798,83768,25029,88857,34888,52171,63133,16939,95122,31264,7006,56696,84238,60986,25622,22973,83335,3681,92009,97206,67773,68873,50397,51845,81226,34,39384,19872,14387,29151,9105,86972,20259,22695,99301,50232,29296,9107,4977,49045,9573,25400,3430,1614,39028,51323,45596,95033,96890,30501,88688,66127,99318,44462,92340,9747,11523,12154,69783,91358,57856,13847,34876,82518,39401,33473,71995,98328,14358,23599,42472,37601,3994,46517,25420,68254,15846,34201,31710,26821,58743,36653,43639,40035,24876,87497,77685,53880,3974,70156,56738,54862,57692,24496,78266,93074,85729,90402,62515,42192,71592,50427,95841,47190,56716,90355,48926,37564,85781,98003,17932,1316,47175,13691,21194,59404,17063,31943,57638,31343,10416,32230,48887,48681,57475,6488,2456,43990,14847,71078,90582,15894,14900,607,97226,35692,18656,5661,29793,86919,9172,74191,71616,98707,32106,3270,1638,56606,33251,47674,96531,83026,15337,7690,59357,76286,3004,9482,66018,21242,35495,13893,49569,85876,55793,33537,40872,44376,16546,70122,32100,21875,20678,99865,50303,44668,44693,91958,32585,72362,15100,80982,84922,19799,6281,71324,23553,84000,11537,9987,11989,78728,48801,22431,29136,55355,1210,8810,62511,73092,19364,33795,72116,21347,20963,65833,21516,60259,35150,89862,30110,12255,49310,62911,84699,50812,87484,51140,33180,23721,43102,87331,64485,38692,99280,82267,46525,65494,66608,8576,4325,62705,1264,73176,71662,60603,8940,72042,59565,56845,60963,84186,49349,93269,52952,36143,53723,71740,74724,231,22097,38663,9335,43925,2581,62739,98742,42033,79802,79244,90414,16019,45066,39148,60390,30395,97585,2146,83533,33083,21610,49350,52022,11136,80338,37984,48941,1418,15299,83744,77547,23283,17848,15580,96413,90652,55304,80543,90444,39736,25184,97581,83751,2637,31870,36141,56952,30820,53485,39300,86380,83260,5938,8041,31166,81747,90246,59005,17518,37891,76974,55195,12518,76752,26574,65172,91410,65445,25579,92653,6594,60094,9417,12545,59743,62055,98462,9600,29863,67981,67879,46846,7392,98745,70390,4095,5956,36155,68863,90195,95964,77112,28063,90134,52560,93874,49959,42027,9440,34752,52771,19849,87997,87379,63548,59569,52334,62692,5080,40490,91007,48117,37029,94759,77285,39529,1649,76416,5543,10795,92415,34982,93706,21511,34713,39388,93102,26664,72093,91344,48561,65561,15644,4333,88512,69922,628,30835,99378,48424,50653,73012,1566,32326,33500,19250,87475,30050,19891,9056,59796,34813,54197,50608,20856,65886,4488,76521,1152,18755,61160,48431,12204,97447,76459,49690,97698,70421,99048,44070,73817,68521,62422,7982,16182,16317,39559,71648,86796,72009,38687,7436,50020,98498,45169,93147,22197,43132,61129,88097,71996,89492,78939,63460,13205,47621,59854,93737,13692,54880,36641,91097,34018,13116,85272,16665,64136,54215,86626,1344,43285,25293,79496,65273,54408,77274,39154,3993,15335,51165,22634,97282,29729,83357,54438,2147,70104,19345,33103,2427,79886,134,25065,88081,27753,35797,65751,54901,20082,15923,92378,43940,52952,41531,80001,94902,95656,36848,67464,42468,9211,80210,37793,15925,42715,13213,79743,17011,61664,43421,33152,3001,8827,46763,10915,28257,4300,74589,89336,31085,57587,24351,73466,43982,5703,22216,49434,67920,81581,8070,46878,53676,89532,84353,49629,5163,86758,67050,77195,45882,4109,57483,28697,55679,5357,8867,10287,62530,31985,46750,84278,40659,87414,98812,31866,61325,37999,72313,59255,73829,85009,94233,86222,88822,39680,51717,3151,66283,17161,54518,7700,7066,64517,6455,38964,55271,75958,28831,13335,78981,74682,93311,137,50773,19372,22942,66193,7933,75421,13298,10190,10491,28390,2349,93218,11645,64538,87658,15518,75241,82168,89629,86670,40543,50129,72279,19581,5069,97366,81016,38763,17769,24571,45101,97465,5993,38154,99649,74567,14153,21776,11101,36717,87277,99884,45629,47067,32780,48605,38675,85488,16652,56868,90644,96598,70106,82602,33629,39929,56605,87478,43391,93309,22052,79389,2886,11742,36552,60021,54743,24589,50454,53864,96536,38350,69221,94679,96750,26718,71884,91060,12596,81109,78873,92336,87173,90842,23954,63750,90190,55545,39966,58230,94228,9983,27601,73590,70753,19505,94838,68347,37238,94375,53468,26863,57021,26752,68456,45976,7388,55056,13700,66683,77694,18425,12599,88877,6592,62482,18514,82483,4059,49734,36353,63711,91839,29652,20495,80155,57275,89396,16259,97239,12774,73692,41461,12599,56618,4314,75868,38425,59913,48445,11992,54171,61090,77076,22021,90628,592,41149,59668,8392,73326,70286,39969,28559,90760,12728,22485,38024,56805,72248,62374,93814,56603,36766,20483,29108,69899,54716,92157,8007,68409,99130,83088,62064,144,57140,91156,44663,74510,28720,28887,95520,33241,13690,51013,66789,91294,39465,95469,49585,50342,16904,56808,53684,18149,21524,32434,7033,59557,18526,95720,80121,53717,65132,53858,3129,64755,24806,70014,94176,80436,71800,30134,33173,46264,26137,75713,28208,10992,77348,72817,40145,26088,21285,73042,66484,15626,21952,76775,42444,6457,63242,11260,54694,93444,51599,80659,71495,59436,91785,73158,67306,76508,91721,78035,54869,94827,4616,66911,35121,79145,3920,27705,6077,5951,22868,95675,31171,46438,16183,90960,28559,12650,89791,5334,56919,44770,17565,53393,11235,99655,22951,59332,78189,47541,50688,7868,20470,66262,81947,75386,26269,8458,86601,31819,74789,45359,59133,16555,25175,97976,4093,82424,17599,8592,44129,47207,98817,3993,81424,72002,14499,99665,27725,74553,30765,80152,55584,93326,96954,30835,15545,8739,20963,79883,3943,22904,53927,20392,28568,36203,24243,13634,30241,74395,32809,96123,64831,87880,65959,20690,72019,1078,1745,27088,88529,48743,72766,9200,20698,37956,32501,21765,5456,57915,85388,6353,48909,12211,66969,35961,271,66357,89455,91880,48750,12829,709,61938,25822,94229,28856,93512,59539,98099,17304,77838,44476,53337,34408,13134,52756,2460,82552,3181,79185,14560,53962,20638,91608,16060,83763,80765,71461,77105,1350,62806,533,1827,91473,38048,41104,59689,67601,77280,90046,13874,64463,22874,42209,35901,52004,3017,73522,37798,82560,41431,70841,72906,99966,74204,94450,97093,55200,63605,98097,28731,62612,21753,98228,93483,83959,47443,60507,68952,41553,28238,84748,87948,81648,48497,29304,92993,1250,62819,4916,36340,6264,62861,24981,72707,96637,13477,94568,79662,67125,13883,78906,47303,6845,85236,2548,36519,93614,79204,50412,61959,85700,4800,98600,28456,25639,66786,78043,41685,20649,48024,61669,45861,50920,81257,48988,61927,75672,4597,22160,52118,43704,46602,39978,87993,91268,59623,78492,80452,73226,15673,25000,91346,19411,31593,41439,32458,76626,83509,11734,15172,6204,91101,53806,56872,34644,86140,15379,99041,38954,9485,72746,35802,52522,43861,55246,71723,15138,73953,49241,80268,72534,51332,862,56139,29038,95060,87762,3537,36833,95134,43234,21821,50372,19963,14537,7743,99988,19814,10409,46316,94909,82056,34814,76070,14431,19808,9138,10107,72747,76360,64969,72420,57298,73337,1092,50757,82779,82283,81662,60064,44324,97633,18546,86655,13623,29278,18145,77557,55193,97046,16813,46822,17640,24407,1648,27760,46156,36317,9572,33885,17241,31190,72577,74632,34306,13532,82934,17653,90196,17569,1195,94533,1785,14079,53823,36039,38293,10499,25996,17919,17775,82137,61091,87037,54862,14250,86348,66202,29160,6857,82758,74672,31383,66637,36939,4434,78175,51977,94507,49712,77798,20749,12807,7605,27805,35523,46808,93285,18164,82679,94642,54265,42967,14329,60799,37518,89214,24196,46991,2246,10739,49335,63458,21711,70470,37318,10334,31199,20092,25850,98167,93952,19082,92091,94719,62500,11090,64723,56363,39439,64377,70009,61914,94347,98169,28996,32103,22804,78934,939,92408,66888,9870,38777,87901,72488,87911,24955,54019,52939,14843,74475,30004,48451,61505,56924,38228,25740,86307,33182,88115,42208,14926,43483,96176,94678,1372,69037,4418,54696,12865,18591,32249,61284,99269,82537,53923,75171,52963,82016,65938,6070,74983,82844,2031,13023,36900,65176,15851,42420,5611,34357,4229,62968,90842,65618,18943,72826,57326,9398,55950,57246,82142,69845,74193,17392,39558,3894,71351,17800,42863,38226,49762,83380,67348,98797,37393,49419,99379,22110,29993,18580,12621,6540,60437,82793,82963,70567,61916,88170,99020,42100,94015,71494,60055,28177,42828,41783,32945,7178,68743,87574,71950,19679,72667,8794,3496,47204,44998,44424,61927,12982,18249,83032,31449,14831,87554,60444,45411,25603,79296,35933,34591,48091,20148,91927,39965,2035,7913,66837,18925,82814,77992,12197,41227,18476,27648,92569,11478,82879,5618,3434,98822,95399,84697,71575,9661,97451,63312,54273,70919,28565,25086,39626,91069,22646,88443,45339,66406,54488,54367,45993,87062,23033,1536,7085,56507,15017,84041,94867,39256,81530,42457,18235,61187,54792,42708,25221,24433,39207,51027,13787,40006,2537,28987,86268,7351]
# totalTrips = 9765277
# time = [10000]
# totalTrips = 10000000
# result = minimumTime(time, totalTrips)
# print("Result is {0}".format(result))

def minSpeedOnTime(dist, hour: float) -> int:
    from math import ceil
    n = len(dist)
    def computeHours(mid):
        result = 0
        for i, d in enumerate(dist):
            if i < n - 1:
                result += ceil(d / mid)
            else:
                result += round(d / mid, 1)
        return result

    def bsearch():
        l, r = 1, 10**9
        while l <= r:
            mid = l + (r-l) // 2
            val = computeHours(mid)
            # if val == hour: return mid
            if val < hour:
                r = mid - l
            else:
                l = mid + 1
        print(l)
        return -1
    result = bsearch()
    return result

# dist = [1,3,2]
# hour = 2.7
# dist = [1,3,2]
# hour = 6
# dist = [1,3,2]
# hour = 1.9
# dist = [1,1,100000]
# hour = 2.01
# result = minSpeedOnTime(dist, hour)
# print("Result is {0}".format(result))
def numFriendRequests(ages) -> int:
            
    def bsearch(i, target):
        l, r = 0, i-1
        result = -1           
        while l <= r:
            mid = l + (r-l)//2
            if ages[mid] > 0.5*target + 7:
                result = mid
                r = mid - 1
            else:
                l = mid + 1
        return result

    n = len(ages)
    ages = sorted(ages)
    print(ages)
    result = 0
    d = {}
    
    for i in range(n-1, -1, -1):
        if d.__contains__(ages[i]):
            result += d[ages[i]]
        else:
            firstLeft = bsearch(i, ages[i])    
            if firstLeft > -1:
                diff = i - firstLeft 
                d[ages[i]] = diff
                result += diff    
            
    print(d)  
    return result

#ages = [20,30,100,110,120]
#ages = [16,17,18]
#ages = [16,16]
# ages = [54,23,102,90,40,74,112,74,76,21]
# result = numFriendRequests(ages)
# print("Result is {0}".format(result))

def maxProfit(inventory, orders: int) -> int:
    inventory = sorted(inventory, reverse=True)
    mod = 10**9 + 7
    
    def countOrders(mid):
        result = 0
        for i in inventory:
            result += (i-mid)
        return result
               
    def bsearch():
        l, r = 1, max(inventory)
        while l <= r:
            mid = l + (r-l) // 2
            val = countOrders(mid)
            if val < orders:
                r = mid - 1
            else: 
                l = mid + 1
        return l
    
    k = bsearch()
    result = 0
    numOrders = 0
    
    
    for i in inventory:
        numOrders += (i - k + 1) % mod
        print(numOrders)
        if numOrders > orders:
            break
        n = (i - k + 1) % mod
        result = result + (n % mod * (i + k) % mod /2) % mod
    return result
                
# inventory = [3,5]
# orders = 6
# inventory = [2,5]
# orders = 4
# inventory = [1,2]
# orde[76]
# inventory = [76]
# orders = 22
# inventory = [773160767]
# orders = 252264991
# inventory = [497978859,167261111,483575207,591815159]
# orders = 836556809
# result = maxProfit(inventory, orders)
# print("Result is {0}".format(result))

def maximumImportance(n: int, roads) -> int:
    
    scores = [0] * n
    for road in roads:
        u, v = road
        scores[u] = max(scores[u], u + v)
        scores[v] = max(scores[v], u + v)
    
    print(scores)
    
# n = 5
# roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
# result = maximumImportance(n, roads)
# print("Result is {0}".format(result))

def findDiagonalOrder(nums):
    from heapq import heapify, heappush, heappop
    
    m = len(nums)
    n = 0
    for i, num in enumerate(nums):
        n = max(n, m+len(num))

    scores = [[] for _ in range(n)]
    for i, num in enumerate(nums):
        for j in range(len(num)):
            k = i + j
            scores[k].append(nums[i][j])
            # heappush(scores[k], -nums[i][j])
    
    result = []
    for i in range(n):
        while scores[i]:
            result.append(scores[i].pop())
    return result
        
# nums = [[1,2,3],[4,5,6],[7,8,9]]
#nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
# nums = [[5,6,3,10],[9],[1,19],[9,9,2]]
# result = findDiagonalOrder(nums)
# print("Result is {0}".format(result))
def maximumScore(a: int, b: int, c: int):
    from heapq import heapify, heappush, heappop
    scores = []
    heapify(scores)
    heappush(scores, -a)
    heappush(scores, -b)
    heappush(scores, -c)
    result = 0
    while scores:
        a = heappop(scores)
        a += 1
        b = heappop(scores)
        b += 1
        result += 1
        heappush(scores, a)
        heappush(scores, b)
        if scores[1::] == [0, 0]:
            break 
    return result
  
# a = 2
# b = 4
# c = 6  
# a = 4
# b = 4
# c = 6
# a = 1
# b = 8
# c = 8
# a = 6
# b = 2
# c = 1
# result = maximumScore(a, b, c)
# print("Result is {0}".format(result))

def isPossible(nums):
    from heapq import heapify, heappush, heappop
    scores = []
    heapify(scores)
    for num in nums:
        heappush(scores, num)
        
    a = -1
    result = 0
    while scores:
        b = heappop(scores)
        print(a, b)
        if b <= a:
            if result < 3:
                return False
            else:
                result = 0
        result += 1
        a = b        
    return result >= 3            

# nums = [1,2,3,3,4,5]
# nums = [1,2,3,4,4,5]
nums = [1,2,3,3,4,4,5,5]
result = isPossible(nums)
print("Result is {0}".format(result))

        